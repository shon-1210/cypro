% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subset-object.R
\name{subsetByFilter}
\alias{subsetByFilter}
\title{Create data subset by specified requirements}
\usage{
subsetByFilter(object, new_name, ..., phase = NULL, verbose = NULL)
}
\arguments{
\item{object}{A valid cypro object.}

\item{new_name}{Character value. Denotes the name of the output object. If set to NULL the name of the
input object is taken and suffixed with \emph{'_subset'}.}

\item{...}{<\code{\link[rlang:args_data_masking]{data-masking}}> Expressions that
return a logical value, and are defined in terms of the variables in
\code{.data}. If multiple expressions are included, they are combined with the
\code{&} operator. Only rows for which all conditions evaluate to \code{TRUE} are
kept.}

\item{verbose}{Logical. If set to TRUE informative messages regarding
the computational progress will be printed.

(Warning messages will always be printed.)}
}
\value{
A cypro object that contains the data for the subsetted cells.
}
\description{
Subset functions allow to conveniently split your data by certain characteristics such
as cell lines, conditions, cluster etc. or for specific cell ids. This might be useful if you want apply some machine learning
algorithms such as clustering and correlation on only a subset of cells. See details for more information.
}
\details{
Creating subsets of your data affects analysis results such as clustering and correlation which
is why these results are reset in the subsetted object and must be computed again. To prevent inadvertent overwriting
the default directory is reset as well. Make sure to set a new one via \code{setDefaultDirectory()}.

The mechanism with which you create the subset is stored in the output object. Use \code{printSubsetHistory()}
to reconstruct the way from the original object to the current one.

The input for \code{...} must be supplied in the fashion of \code{dplyr::filter()}.
The expressions are applied to the stat data.frame (obtained via \code{getStatDf()}) and
must refer to the variables you obtain with \code{getStatVariableNames()}.

Cells that match all requirements are those that are kept in the returned cypro object.
}
\note{
In case of experiment set ups with multiple phases:

As creating subsets of your data affects downstream analysis results you have to
manually specify the phase you are referring to.

The output object contains data for all phases but only for those cells that matched
the input for argument \code{...} during the specified phase.
}
\seealso{
\code{dplyr::filter()}
}
